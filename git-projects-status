#!/usr/bin/env node

const fs = require('fs');
const exec = require('child_process').exec;
const process = require('process');
const { isGitRepository, isDirectory, formatDate } = require('./__shared');

const workspacePath = process.argv[2] || process.cwd();

function isHidden(dirName) {
  return /^\.(.*)$/.test(dirName);
}

// ---------------------------------------------------------------------------------------------------------------------

function countLines(name, path, callback) {
  const today = formatDate(new Date());
  const command = `cd ${path} && git log --all --after="${today} 00:00:00" --before="${today} 23:59:59" --shortstat --oneline`;

  const regexp = {
    changes: / (\d+) file/gim,
    insertions: / (\d+) ins/gim,
    deletions: / (\d+) del/gim,
  };

  const results = {
    name: name,
    changes: 0,
    insertions: 0,
    deletions: 0,
  };

  function commandHandler(error, stdout, stderr) {
    if (stdout) {
      const matchChanges = stdout.match(regexp.changes);
      const matchInsertions = stdout.match(regexp.insertions);
      const matchDeletions = stdout.match(regexp.deletions);

      // Count changes
      if (Array.isArray(matchChanges)) {
        matchChanges.forEach((item) => {
          results.changes += parseInt(item, 10);
        });
      }

      // Count insertions
      if (Array.isArray(matchInsertions)) {
        matchInsertions.forEach((item) => {
          results.insertions += parseInt(item, 10);
        });
      }

      // Count deletions
      if (Array.isArray(matchDeletions)) {
        matchDeletions.forEach((item) => {
          results.deletions += parseInt(item, 10);
        });
      }

      callback(results);
    } else if (stderr) {
      console.error(`[${name}] stderr`, stderr);
      callback(stderr);
    } else if (error) {
      console.error(`[${name}] error`, error);
      callback(error);
    } else {
      callback(null);
    }
  }

  exec(command, commandHandler);
}

function displayProjectStatus(project) {
  console.log(
    `### ${project.name}

  ${project.changes} changes
  ${project.insertions} insertions
  ${project.deletions} deletions`.trim() + '\n',
  );
}

// ---------------------------------------------------------------------------------------------------------------------

function handleProjectStatus(name, path) {
  return new Promise((resolve) => {
    const pathname = `${path}/${name}`;
    const isNotDirectory = !isDirectory(pathname);
    const isNotRepository = !isGitRepository(pathname);
    const isHideDirectory = isHidden(name);

    if (isNotDirectory || isNotRepository || isHideDirectory) {
      resolve(undefined);
      return;
    }

    countLines(name, pathname, (changes) => {
      resolve(changes);
    });
  });
}

function main(path) {
  fs.readdir(path, (err, files) => {
    if (err) {
      console.log('Caught an Error');
      console.error(err);
      return;
    }

    // Revert order to alphabetical.
    files = files.reverse();

    const handlers = files.map((name) => {
      return handleProjectStatus(name, path);
    });

    Promise.all(handlers).then((projects) => {
      projects = projects.filter(Boolean);

      if (projects.length > 0) {
        console.log(`\nToday's changes on: "${path}"\n`);
      } else {
        console.log('Nothing happened today');
      }

      projects.forEach(displayProjectStatus);
    });
  });
}

main(workspacePath);
