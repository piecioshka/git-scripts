#!/usr/bin/env node

const { isDirectory, getDirectories } = require("../shared/__filesystem");
const { isGitRepository } = require("../shared/__git");
const { runCommand } = require("../shared/__shared");
const { blue, brightGreen } = require("../shared/__colors");

const command = process.argv[2];
const maxLevels = 5;
const USAGE = `
    Usage: git run-on-nested-repos COMMAND

    Examples:

        $ git run-on-nested-repos "git config --get remote.origin.url"
`;

if (!command) {
  console.log(USAGE);
  process.exit(1);
}

function getLevelForPath(pathname) {
  return pathname.split("/").length;
}

async function enter(currentPath, { basePath, baseLevel }) {
  const dirs = getDirectories(currentPath);

  for (const fileName of dirs) {
    const fullFileName = `${currentPath}/${fileName}`;
    if (isDirectory(fullFileName)) {
      const currentLevel = getLevelForPath(fullFileName);
      const deep = currentLevel - baseLevel;
      const name = fullFileName.replace(basePath, "");
      const directory = `==> .${brightGreen(name)}`;

      if (isGitRepository(fullFileName)) {
        console.log(`${directory} ${blue(">")} ${command}`);
        try {
          const results = await runCommand(command, { cwd: fullFileName });
          if (results) {
            console.log(`${results}`);
          }
        } catch (err) {
          if (err) {
            console.log("Caught an Error");
            console.error(err);
          }
        } finally {
          console.log("");
        }
      } else {
        // console.log(`This is not a Git repository: ${fullFileName}`);
        if (deep < maxLevels) {
          await enter(fullFileName, { basePath, baseLevel });
        }
      }
    } else {
      // console.log(`This is not a directory: ${fileName}`);
    }
  }
}

async function main() {
  console.log("Run on all nested Git repositories:\n");
  const basePath = await runCommand("pwd");
  const baseLevel = getLevelForPath(basePath);
  await enter(basePath, { basePath, baseLevel });
}

main().catch(console.error);
