#!/usr/bin/env node

const path = require('path');
const process = require('process');
const {
  isGitRepository,
  getFilesAndDirectories,
  formatDate,
  runCommand,
} = require('../shared/__shared');

const CMD_FIRST_COMMIT = `git log --reverse | sed -n -e '1,5p'`;
const CMD_GET_DATE = `${CMD_FIRST_COMMIT} | grep -v diff | head -n3 | tail -n1 | cut -f4-9 -d ' '`;

async function getInitialDate(pathname) {
  const date = await runCommand(CMD_GET_DATE, { cwd: pathname });
  return new Date(date);
}

async function describePathname(pathname = '.') {
  const result = {};
  result.isGitRepository = isGitRepository(pathname);
  result.initialDate = await getInitialDate(pathname);
  return result;
}

function sortByInitialDate(projectA, projectB) {
  const dateA = formatDate(projectA.initialDate);
  const dateB = formatDate(projectB.initialDate);

  if (dateB > dateA) {
    return -1;
  } else if (dateB < dateA) {
    return 1;
  } else {
    return 0;
  }
}

function toRecord(project) {
  const date = formatDate(project.initialDate);
  const projectName = project.basename;
  return `- [${date}] ${projectName}`;
}

function displayResults(projects) {
  const keys = Object.keys(projects);

  if (keys.length === 0) {
    console.log('Not found any git repository in this directory\n');
    return;
  }

  keys.forEach((year) => {
    const projectsInYear = projects[year];
    console.log(year);

    const projectRecords = projectsInYear.sort(sortByInitialDate).map(toRecord);

    console.log(projectRecords.join('\n'));
    console.log('');
  });
}

function setupPromiseLoop(files, workspacePath) {
  const projects = {};

  return files.reduce((promise, file) => {
    const pathname = path.resolve(workspacePath, file);

    if (!isGitRepository(pathname)) {
      return promise.then(() => {
        return projects;
      });
    }

    return promise
      .then(() => {
        return describePathname(pathname);
      })
      .then((descriptor) => {
        if (!descriptor.isGitRepository) {
          return Promise.resolve();
        }

        const year = descriptor.initialDate.getFullYear();

        if (!projects[year]) {
          projects[year] = [];
        }

        projects[year].push({
          initialDate: descriptor.initialDate,
          pathname: pathname,
          basename: file,
        });
        return projects;
      })
      .catch((err) => {
        console.log('Caught an Error');
        console.error(err);
      });
  }, Promise.resolve());
}

async function main() {
  console.log('');
  const workspacePath = process.argv[2] || process.cwd();
  const files = getFilesAndDirectories(workspacePath);
  const projects = await setupPromiseLoop(files, workspacePath);
  displayResults(projects);
}

main().catch(console.error);
