#!/usr/bin/env node

const path = require("node:path");
const process = require("node:process");
const { getFilesAndDirectories } = require("../shared/__filesystem");
const { isGitRepository } = require("../shared/__git");
const { formatDate, runCommand, sortBy } = require("../shared/__shared");
const { yellow, brown, gray } = require("../shared/__colors");

const CMD_FIRST_COMMIT = `git log --reverse | sed -n -e '1,5p'`;
const CMD_GET_DATE = `${CMD_FIRST_COMMIT} | grep -v diff | head -n3 | tail -n1 | cut -f4-9 -d ' '`;

async function getGitRepoStartDate(pathname) {
  const date = await runCommand(CMD_GET_DATE, { cwd: pathname });
  return new Date(date);
}

async function getGitAuthor(pathname) {
  const author = await runCommand(`git log --format='%aN' | tail -n1`, {
    cwd: pathname,
  });
  return author.trim();
}

async function describePathname(pathname = ".") {
  const result = {};
  result.isGitRepository = isGitRepository(pathname);
  result.startDate = await getGitRepoStartDate(pathname);
  result.author = await getGitAuthor(pathname);
  return result;
}

function toRecord(project) {
  const { projectName, startDate, author } = project;
  const date = formatDate(startDate);
  return `- [${brown(date)}] ${projectName} ${gray(author)}`;
}

function displayResults(projects) {
  const keys = Object.keys(projects);

  if (keys.length === 0) {
    console.log(yellow("Not found any git repository in this directory"));
    return;
  }

  keys.forEach((year) => {
    console.log(year);
    const projectRecords = projects[year]
      .sort(sortBy((v) => v.startDate.getTime()))
      .map(toRecord);
    console.log(projectRecords.join("\n"));
  });
}

function setupPromiseLoop(files, workspacePath) {
  const projects = {};

  return files.reduce((promise, file) => {
    const pathname = path.resolve(workspacePath, file);

    if (!isGitRepository(pathname)) {
      return promise.then(() => {
        return projects;
      });
    }

    return promise
      .then(() => {
        return describePathname(pathname);
      })
      .then((descriptor) => {
        if (!descriptor.isGitRepository) {
          return Promise.resolve();
        }

        const year = descriptor.startDate.getFullYear();

        if (!projects[year]) {
          projects[year] = [];
        }

        projects[year].push({
          startDate: descriptor.startDate,
          pathname,
          projectName: file,
          author: descriptor.author,
        });
        return projects;
      })
      .catch((err) => {
        console.error(err.message);
      });
  }, Promise.resolve());
}

async function main() {
  const workspacePath = process.argv[2] || process.cwd();
  const files = getFilesAndDirectories(workspacePath);
  const projects = await setupPromiseLoop(files, workspacePath);
  displayResults(projects);
}

main().catch(console.error);
