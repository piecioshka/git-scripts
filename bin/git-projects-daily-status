#!/usr/bin/env node

const exec = require("node:child_process").exec;
const process = require("node:process");
const { formatDate } = require("../shared/__shared");
const {
  isDirectory,
  isHidden,
  getFilesAndDirectories,
} = require("../shared/__filesystem");
const { isGitRepository, getGitBranchName } = require("../shared/__git");
const {
  white,
  red,
  green,
  yellow,
  magenta,
  brightGreen,
} = require("../shared/__colors");

// ---------------------------------------------------------------------------------------------------------------------

async function countLines(name, pathname, callback) {
  const today = formatDate(new Date());
  const command = `cd ${pathname} && git log --all --after="${today} 00:00:00" --before="${today} 23:59:59" --shortstat --oneline`;

  const regexp = {
    changes: / (\d+) file/gim,
    insertions: / (\d+) ins/gim,
    deletions: / (\d+) del/gim,
  };

  const results = {
    projectName: name,
    branchName: await getGitBranchName(pathname),
    changes: 0,
    insertions: 0,
    deletions: 0,
  };

  function commandHandler(error, stdout, stderr) {
    if (stdout) {
      const matchChanges = stdout.match(regexp.changes);
      const matchInsertions = stdout.match(regexp.insertions);
      const matchDeletions = stdout.match(regexp.deletions);

      // Count changes
      if (Array.isArray(matchChanges)) {
        matchChanges.forEach((item) => {
          results.changes += parseInt(item, 10);
        });
      }

      // Count insertions
      if (Array.isArray(matchInsertions)) {
        matchInsertions.forEach((item) => {
          results.insertions += parseInt(item, 10);
        });
      }

      // Count deletions
      if (Array.isArray(matchDeletions)) {
        matchDeletions.forEach((item) => {
          results.deletions += parseInt(item, 10);
        });
      }

      callback(results);
    } else if (stderr) {
      console.error(`[${name}] stderr`, stderr);
      callback(stderr);
    } else if (error) {
      console.error(`[${name}] error`, error);
      callback(error);
    } else {
      callback(null);
    }
  }

  exec(command, commandHandler);
}

function displayProjectStatus(project) {
  const { projectName, branchName, changes, insertions, deletions } = project;
  const status = [
    `${changes} changes`,
    `${insertions} insertions`,
    `${deletions} deletions`,
  ];
  const statusColors = [
    changes > 0 ? yellow : white,
    insertions > 0 ? green : white,
    deletions > 0 ? red : white,
  ];
  console.log(
    `==> ${brightGreen(projectName)} ${magenta(`[${branchName}]`)}\n`,
  );
  status.forEach((item, index) => {
    console.log(`- ${statusColors[index](item)}`);
  });
  console.log("");
}

// ---------------------------------------------------------------------------------------------------------------------

function handleProjectStatus(name, path) {
  return new Promise((resolve) => {
    const pathname = `${path}/${name}`;
    const isNotDirectory = !isDirectory(pathname);
    const isNotRepository = !isGitRepository(pathname);
    const isHideDirectory = isHidden(name);

    if (isNotDirectory || isNotRepository || isHideDirectory) {
      resolve(undefined);
      return;
    }

    countLines(name, pathname, (changes) => {
      resolve(changes);
    });
  });
}

async function setupPromiseLoop(files, path) {
  const handlers = files.map((name) => {
    return handleProjectStatus(name, path);
  });

  let projects = await Promise.all(handlers);

  projects = projects.filter(Boolean);

  if (projects.length == 0) {
    console.log(yellow("Nothing happened today"));
    return;
  }

  projects.forEach(displayProjectStatus);
}

async function main() {
  console.log("List of projects with changes today:\n");
  const workspacePath = process.argv[2] || process.cwd();
  const files = getFilesAndDirectories(workspacePath);
  await setupPromiseLoop(files, workspacePath);
}

main().catch(console.error);
