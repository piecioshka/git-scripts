#!/usr/bin/env node

const path = require('path');
const process = require('process');
const {
  isFile,
  isDirectory,
  isGitRepository,
  getFilesAndDirectories,
  runCommand,
} = require('./__shared');

const { red, green, yellow } = require('./__colors');

async function isLocalGitRepository(pathname) {
  if (!isGitRepository(pathname)) {
    return false;
  }

  try {
    const output = await runCommand(
      `cd ${pathname} && git config remote.origin.url`,
    );
    return output.length === 0;
  } catch (error) {
    return true;
  }
}

async function isDirtyGitRepository(pathname) {
  if (!isGitRepository(pathname)) {
    return false;
  }

  try {
    const output = await runCommand(
      `cd ${pathname} && git status --porcelain 2>/dev/null | wc -l`,
    );
    return Boolean(Number(output));
  } catch (error) {
    if (error) {
      console.log(
        `${red('[error]')} (dirty git repository) ${path.basename(pathname)}`,
      );
      console.error(error);
    }
    return false;
  }
}

async function updateGitRepository(pathname) {
  if (!isGitRepository(pathname) || (await isLocalGitRepository(pathname))) {
    return false;
  }

  try {
    await runCommand(`cd ${pathname} && git fetch -p && git pull --all`);
  } catch (error) {}

  return true;
}

async function describePathname(pathname) {
  const result = {};
  result.isFile = isFile(pathname);
  result.isDirectory = isDirectory(pathname);
  result.isGitRepository = isGitRepository(pathname);
  result.isLocalGitRepository = await isLocalGitRepository(pathname);
  result.isDirtyGitRepository = await isDirtyGitRepository(pathname);
  result.isUpdated = await updateGitRepository(pathname);
  return result;
}

function setupPromiseLoop(files, workspacePath) {
  return files.reduce((promise, file) => {
    const pathname = path.resolve(workspacePath, file);

    return promise
      .then(() => {
        return describePathname(pathname);
      })
      .then((descriptor) => {
        const output = [];

        if (descriptor.isFile) {
          output.push(yellow('[file]'));
        } else if (!descriptor.isGitRepository) {
          output.push('[not a Git repo]');
        } else {
          if (descriptor.isDirtyGitRepository) {
            output.push(yellow('[dirty]'));
          }

          if (descriptor.isUpdated) {
            output.push(green('[updated]'));
          }

          if (descriptor.isLocalGitRepository) {
            output.push('[local Git repo]');
          }
        }

        output.push(path.basename(pathname));
        console.log(output.join(' '));
      })
      .catch((err) => {
        console.log('Caught an Error');
        console.error(err);
      });
  }, Promise.resolve());
}

async function main() {
  const workspacePath = process.argv[2] || process.cwd();
  const files = getFilesAndDirectories(workspacePath);
  await setupPromiseLoop(files, workspacePath);
}

main().catch(console.error);
